{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8352607,"sourceType":"datasetVersion","datasetId":4962710}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Import necessary dependencies\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn.metrics import classification_report","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-08T04:24:35.348866Z","iopub.execute_input":"2024-05-08T04:24:35.349228Z","iopub.status.idle":"2024-05-08T04:24:36.521901Z","shell.execute_reply.started":"2024-05-08T04:24:35.349197Z","shell.execute_reply":"2024-05-08T04:24:36.521111Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"**Read the datafile**","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/digit-dataset/digit_data.csv')\nprint('Size of the dataframe: ',df.shape)       # View the size of dataset","metadata":{"execution":{"iopub.status.busy":"2024-05-08T04:25:43.270368Z","iopub.execute_input":"2024-05-08T04:25:43.270792Z","iopub.status.idle":"2024-05-08T04:25:46.633778Z","shell.execute_reply.started":"2024-05-08T04:25:43.270761Z","shell.execute_reply":"2024-05-08T04:25:46.632775Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Size of the dataframe:  (42000, 785)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Visualize images from each label**","metadata":{}},{"cell_type":"code","source":"random_rows = df.groupby('label').apply(lambda x: x.sample(1)).reset_index(drop=True)\nfig, axes = plt.subplots(2, 5, figsize=(3, 3))\n\nfor i, ax in enumerate(axes.flat):\n    image_data = random_rows.iloc[i, 1:].values\n    image = np.array(image_data).reshape(28,28)\n    label = random_rows.iloc[i, 0]\n    ax.imshow(image, cmap='gray')\n    ax.set_title(f\"Label: {label}\", fontsize=8)\n    ax.axis('off')\n\nplt.subplots_adjust(wspace=.2, hspace=-.8)\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-08T04:31:36.339680Z","iopub.execute_input":"2024-05-08T04:31:36.340363Z","iopub.status.idle":"2024-05-08T04:31:37.356500Z","shell.execute_reply.started":"2024-05-08T04:31:36.340335Z","shell.execute_reply":"2024-05-08T04:31:37.355612Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_34/2050138166.py:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  random_rows = df.groupby('label').apply(lambda x: x.sample(1)).reset_index(drop=True)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 300x300 with 10 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"df_arr = np.array(df)   # Convert df to numpy array\nnp.random.seed(42)      # Shuffle the array\nnp.random.shuffle(df_arr)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T04:32:03.327632Z","iopub.execute_input":"2024-05-08T04:32:03.328507Z","iopub.status.idle":"2024-05-08T04:32:03.918811Z","shell.execute_reply.started":"2024-05-08T04:32:03.328472Z","shell.execute_reply":"2024-05-08T04:32:03.917809Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"test_set = df_arr[:1000,:]  # Create the test set\ntest_set = test_set.T       # Transpose the data\ntest_image = test_set[1:,:]/255 # Split the image (normalize the image) and it's label\ntest_label = test_set[0,:]\nprint('Shape of test image: ',test_image.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T04:32:42.686825Z","iopub.execute_input":"2024-05-08T04:32:42.687227Z","iopub.status.idle":"2024-05-08T04:32:42.694530Z","shell.execute_reply.started":"2024-05-08T04:32:42.687197Z","shell.execute_reply":"2024-05-08T04:32:42.693471Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Shape of test image:  (784, 1000)\n","output_type":"stream"}]},{"cell_type":"code","source":"train_set = df_arr[1000:,:] # Create the train set\ntrain_set = train_set.T     # Transpose the data","metadata":{"execution":{"iopub.status.busy":"2024-05-08T04:32:49.500256Z","iopub.execute_input":"2024-05-08T04:32:49.501145Z","iopub.status.idle":"2024-05-08T04:32:49.505250Z","shell.execute_reply.started":"2024-05-08T04:32:49.501111Z","shell.execute_reply":"2024-05-08T04:32:49.504264Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"train_image = train_set[1:,:]/255 # Split the image (normalize the image) and it's label\ntrain_label = train_set[0,:]\nprint('Shape of train image: ',train_image.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T04:32:55.380375Z","iopub.execute_input":"2024-05-08T04:32:55.381215Z","iopub.status.idle":"2024-05-08T04:32:55.483320Z","shell.execute_reply.started":"2024-05-08T04:32:55.381184Z","shell.execute_reply":"2024-05-08T04:32:55.482444Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Shape of train image:  (784, 41000)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Plot a random image from the train set**","metadata":{}},{"cell_type":"code","source":"idx = np.random.randint(1000, 42000)\nimage = train_image[:,idx].reshape(28,28)\nlabel = train_label[idx]\nplt.figure(figsize=(3,3))\nplt.imshow(image, cmap='gray')\nplt.title(f\"Label: {label}\", fontsize=12)\nplt.axis('off')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-08T04:33:15.956331Z","iopub.execute_input":"2024-05-08T04:33:15.957164Z","iopub.status.idle":"2024-05-08T04:33:16.110428Z","shell.execute_reply.started":"2024-05-08T04:33:15.957130Z","shell.execute_reply":"2024-05-08T04:33:16.109092Z"},"trusted":true},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 300x300 with 1 Axes>","image/png":"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"},"metadata":{}}]},{"cell_type":"markdown","source":"**Define the size parameters**","metadata":{}},{"cell_type":"code","source":"input_size = 784\nhidden1_size = 16\nhidden2_size = 8\noutput_size = 10","metadata":{"execution":{"iopub.status.busy":"2024-05-08T04:33:40.256132Z","iopub.execute_input":"2024-05-08T04:33:40.256760Z","iopub.status.idle":"2024-05-08T04:33:40.260909Z","shell.execute_reply.started":"2024-05-08T04:33:40.256726Z","shell.execute_reply":"2024-05-08T04:33:40.260028Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":"**Function to initialize the parameters (Xavier initialization)**","metadata":{}},{"cell_type":"code","source":"def initialize_parameters():\n    np.random.seed(42)\n\n    W0 = np.random.randn(hidden1_size, input_size) * np.sqrt(2 / (input_size + hidden1_size))\n    b0 = np.zeros((hidden1_size, 1))\n    W1 = np.random.randn(hidden2_size, hidden1_size) * np.sqrt(2 / (hidden1_size + hidden2_size))\n    b1 = np.zeros((hidden2_size, 1))\n    W2 = np.random.randn(output_size, hidden2_size) * np.sqrt(2 / (hidden2_size + output_size))\n    b2 = np.zeros((output_size, 1))\n\n    return W0, b0, W1, b1, W2, b2","metadata":{"execution":{"iopub.status.busy":"2024-05-08T04:34:00.762461Z","iopub.execute_input":"2024-05-08T04:34:00.763082Z","iopub.status.idle":"2024-05-08T04:34:00.769985Z","shell.execute_reply.started":"2024-05-08T04:34:00.763049Z","shell.execute_reply":"2024-05-08T04:34:00.768961Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"**Define function for tanh**","metadata":{}},{"cell_type":"code","source":"def tanh_activation(x):\n    return np.tanh(x)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T04:34:26.931855Z","iopub.execute_input":"2024-05-08T04:34:26.932207Z","iopub.status.idle":"2024-05-08T04:34:26.937439Z","shell.execute_reply.started":"2024-05-08T04:34:26.932177Z","shell.execute_reply":"2024-05-08T04:34:26.936352Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"**Define function for derivative of tanh**","metadata":{}},{"cell_type":"code","source":"def tanh_derivative(x):\n    return 1 - np.tanh(x)**2","metadata":{"execution":{"iopub.status.busy":"2024-05-08T04:34:51.872942Z","iopub.execute_input":"2024-05-08T04:34:51.873823Z","iopub.status.idle":"2024-05-08T04:34:51.878085Z","shell.execute_reply.started":"2024-05-08T04:34:51.873785Z","shell.execute_reply":"2024-05-08T04:34:51.877113Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}