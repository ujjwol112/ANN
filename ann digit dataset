{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8352607,"sourceType":"datasetVersion","datasetId":4962710}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Import necessary dependencies\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nfrom sklearn.metrics import classification_report","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-08T09:54:29.875679Z","iopub.execute_input":"2024-05-08T09:54:29.876074Z","iopub.status.idle":"2024-05-08T09:54:33.857382Z","shell.execute_reply.started":"2024-05-08T09:54:29.876043Z","shell.execute_reply":"2024-05-08T09:54:33.856309Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"**Read the datafile**","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/digit-dataset/digit_data.csv')\nprint('Size of the dataframe: ',df.shape)       # View the size of dataset","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:54:33.859589Z","iopub.execute_input":"2024-05-08T09:54:33.860154Z","iopub.status.idle":"2024-05-08T09:54:38.412846Z","shell.execute_reply.started":"2024-05-08T09:54:33.860114Z","shell.execute_reply":"2024-05-08T09:54:38.411926Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Size of the dataframe:  (42000, 785)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Visualize images from each label**","metadata":{}},{"cell_type":"code","source":"random_rows = df.groupby('label').apply(lambda x: x.sample(1)).reset_index(drop=True)\nfig, axes = plt.subplots(2, 5, figsize=(3, 3))\n\nfor i, ax in enumerate(axes.flat):\n    image_data = random_rows.iloc[i, 1:].values\n    image = np.array(image_data).reshape(28,28)\n    label = random_rows.iloc[i, 0]\n    ax.imshow(image, cmap='gray')\n    ax.set_title(f\"Label: {label}\", fontsize=8)\n    ax.axis('off')\n\nplt.subplots_adjust(wspace=.2, hspace=-.8)\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:54:38.414009Z","iopub.execute_input":"2024-05-08T09:54:38.414314Z","iopub.status.idle":"2024-05-08T09:54:39.303648Z","shell.execute_reply.started":"2024-05-08T09:54:38.414287Z","shell.execute_reply":"2024-05-08T09:54:39.302749Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_34/2050138166.py:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  random_rows = df.groupby('label').apply(lambda x: x.sample(1)).reset_index(drop=True)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 300x300 with 10 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"df_arr = np.array(df)   # Convert df to numpy array\nnp.random.seed(42)      # Shuffle the array\nnp.random.shuffle(df_arr)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:54:39.305908Z","iopub.execute_input":"2024-05-08T09:54:39.306229Z","iopub.status.idle":"2024-05-08T09:54:39.908382Z","shell.execute_reply.started":"2024-05-08T09:54:39.306202Z","shell.execute_reply":"2024-05-08T09:54:39.907388Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"test_set = df_arr[:1000,:]  # Create the test set\ntest_set = test_set.T       # Transpose the data\ntest_image = test_set[1:,:]/255 # Split the image (normalize the image) and it's label\ntest_label = test_set[0,:]\nprint('Shape of test image: ',test_image.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:54:39.909628Z","iopub.execute_input":"2024-05-08T09:54:39.910058Z","iopub.status.idle":"2024-05-08T09:54:39.917434Z","shell.execute_reply.started":"2024-05-08T09:54:39.910020Z","shell.execute_reply":"2024-05-08T09:54:39.916448Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Shape of test image:  (784, 1000)\n","output_type":"stream"}]},{"cell_type":"code","source":"train_set = df_arr[1000:,:] # Create the train set\ntrain_set = train_set.T     # Transpose the data","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:54:39.918669Z","iopub.execute_input":"2024-05-08T09:54:39.918988Z","iopub.status.idle":"2024-05-08T09:54:39.928689Z","shell.execute_reply.started":"2024-05-08T09:54:39.918961Z","shell.execute_reply":"2024-05-08T09:54:39.928018Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"train_image = train_set[1:,:]/255 # Split the image (normalize the image) and it's label\ntrain_label = train_set[0,:]\nprint('Shape of train image: ',train_image.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:54:39.929584Z","iopub.execute_input":"2024-05-08T09:54:39.929857Z","iopub.status.idle":"2024-05-08T09:54:40.044103Z","shell.execute_reply.started":"2024-05-08T09:54:39.929816Z","shell.execute_reply":"2024-05-08T09:54:40.043196Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Shape of train image:  (784, 41000)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Plot a random image from the train set**","metadata":{}},{"cell_type":"code","source":"idx = np.random.randint(1000, 42000)\nimage = train_image[:,idx].reshape(28,28)\nlabel = train_label[idx]\nplt.figure(figsize=(3,3))\nplt.imshow(image, cmap='gray')\nplt.title(f\"Label: {label}\", fontsize=12)\nplt.axis('off')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:54:40.045384Z","iopub.execute_input":"2024-05-08T09:54:40.045748Z","iopub.status.idle":"2024-05-08T09:54:40.204740Z","shell.execute_reply.started":"2024-05-08T09:54:40.045710Z","shell.execute_reply":"2024-05-08T09:54:40.203258Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 300x300 with 1 Axes>","image/png":"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"},"metadata":{}}]},{"cell_type":"markdown","source":"**Define the size parameters**","metadata":{}},{"cell_type":"code","source":"input_size = 784\nhidden1_size = 16\nhidden2_size = 8\noutput_size = 10","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:54:40.206540Z","iopub.execute_input":"2024-05-08T09:54:40.207753Z","iopub.status.idle":"2024-05-08T09:54:40.213689Z","shell.execute_reply.started":"2024-05-08T09:54:40.207699Z","shell.execute_reply":"2024-05-08T09:54:40.212729Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"**Function to initialize the parameters (Xavier initialization)**","metadata":{}},{"cell_type":"code","source":"def initialize_parameters():\n    np.random.seed(42)\n\n    W0 = np.random.randn(hidden1_size, input_size) * np.sqrt(2 / (input_size + hidden1_size))\n    b0 = np.zeros((hidden1_size, 1))\n    W1 = np.random.randn(hidden2_size, hidden1_size) * np.sqrt(2 / (hidden1_size + hidden2_size))\n    b1 = np.zeros((hidden2_size, 1))\n    W2 = np.random.randn(output_size, hidden2_size) * np.sqrt(2 / (hidden2_size + output_size))\n    b2 = np.zeros((output_size, 1))\n\n    return W0, b0, W1, b1, W2, b2","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:54:40.216465Z","iopub.execute_input":"2024-05-08T09:54:40.217108Z","iopub.status.idle":"2024-05-08T09:54:40.225450Z","shell.execute_reply.started":"2024-05-08T09:54:40.217078Z","shell.execute_reply":"2024-05-08T09:54:40.224610Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"**Define function for tanh**","metadata":{}},{"cell_type":"code","source":"def tanh_activation(x):\n    return np.tanh(x)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:54:40.226584Z","iopub.execute_input":"2024-05-08T09:54:40.226883Z","iopub.status.idle":"2024-05-08T09:54:40.238572Z","shell.execute_reply.started":"2024-05-08T09:54:40.226860Z","shell.execute_reply":"2024-05-08T09:54:40.237847Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":"**Define function for derivative of tanh**","metadata":{}},{"cell_type":"code","source":"def tanh_derivative(x):\n    return 1 - np.tanh(x)**2","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:54:40.239683Z","iopub.execute_input":"2024-05-08T09:54:40.240075Z","iopub.status.idle":"2024-05-08T09:54:40.249724Z","shell.execute_reply.started":"2024-05-08T09:54:40.240040Z","shell.execute_reply":"2024-05-08T09:54:40.248891Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"**Define sigmoid activation**","metadata":{}},{"cell_type":"code","source":"def sigmoid_activation(x):\n    return 1 / (1 + np.exp(-x))","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:55:20.523341Z","iopub.execute_input":"2024-05-08T09:55:20.524096Z","iopub.status.idle":"2024-05-08T09:55:20.528170Z","shell.execute_reply.started":"2024-05-08T09:55:20.524064Z","shell.execute_reply":"2024-05-08T09:55:20.527303Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"**Define sigmoid derivative**","metadata":{}},{"cell_type":"code","source":"def sigmoid_derivative(x):\n    sig = sigmoid_activation(x)\n    return sig * (1 - sig)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:55:42.709212Z","iopub.execute_input":"2024-05-08T09:55:42.709574Z","iopub.status.idle":"2024-05-08T09:55:42.715058Z","shell.execute_reply.started":"2024-05-08T09:55:42.709546Z","shell.execute_reply":"2024-05-08T09:55:42.713935Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"**Define the softmax function**","metadata":{}},{"cell_type":"code","source":"def softmax_activation(x):\n    temp = np.exp(x - np.max(x))                    # Subtraction for numerical stability\n    return temp / np.sum(temp, axis = 0)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:56:25.175553Z","iopub.execute_input":"2024-05-08T09:56:25.176150Z","iopub.status.idle":"2024-05-08T09:56:25.181323Z","shell.execute_reply.started":"2024-05-08T09:56:25.176112Z","shell.execute_reply":"2024-05-08T09:56:25.180286Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":"**Function to implement forward propagation**","metadata":{}},{"cell_type":"code","source":"def forward_propagation(W0, b0, W1, b1, W2, b2, A0):\n    Z1 = np.dot(W0, A0) + b0                        # Calculate the input to the hidden layer (Z1)\n    A1 = tanh_activation(Z1)\n\n    Z2 = np.dot(W1, A1) + b1                        # Calculate the input to the hidden layer (Z2)\n    A2 = sigmoid_activation(Z2)\n\n    Z3 = np.dot(W2, A2) + b2                        # Calculate the input to the output layer (Z3)\n    A3 = softmax_activation(Z3)\n\n    return Z1, A1, Z2, A2, Z3, A3","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:56:48.431399Z","iopub.execute_input":"2024-05-08T09:56:48.432124Z","iopub.status.idle":"2024-05-08T09:56:48.437735Z","shell.execute_reply.started":"2024-05-08T09:56:48.432093Z","shell.execute_reply":"2024-05-08T09:56:48.436764Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"def one_hot_label(Y):\n    m = Y.shape[0]\n    one_hot_encoded = np.zeros((10, m))\n    one_hot_encoded[Y, np.arange(m)] = 1\n    return one_hot_encoded","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:57:03.707952Z","iopub.execute_input":"2024-05-08T09:57:03.708971Z","iopub.status.idle":"2024-05-08T09:57:03.714151Z","shell.execute_reply.started":"2024-05-08T09:57:03.708928Z","shell.execute_reply":"2024-05-08T09:57:03.713207Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"def backward_propagation(Z1, A1, Z2, A2, Z3, A3, W0, W1, W2, A0, Y, lambd):\n    m = Y.shape[0]\n    r = (lambd / m)\n    Y = one_hot_label(Y)        # Encode the label\n    \n    dZ3 = A3 - Y                # Derivative of cost with respect to output\n\n    # Compute the gradient of the cost with respect to output layer\n    dW2 = (1/m) * np.dot(dZ3, A2.T) + r * W2\n    db2 = (1/m) * np.sum(dZ3, axis=1, keepdims=True)\n\n    # Compute the derivative of the activation function for the second hidden layer\n    dZ2 = np.dot(W2.T, dZ3) * sigmoid_derivative(Z2)\n\n    # Gradient of cost with respect to second hidden layer\n    dW1 = (1/m) * np.dot(dZ2, A1.T) + r * W1  # Corrected this line\n    db1 = (1/m) * np.sum(dZ2, axis=1, keepdims=True)\n\n    # Compute the derivative of the activation function for the first hidden layer\n    dZ1 = np.dot(W1.T, dZ2) * tanh_derivative(Z1)\n\n    # Gradient of cost with respect to first hidden layer\n    dW0 = (1/m) * np.dot(dZ1, A0.T) + r * W0\n    db0 = (1/m) * np.sum(dZ1, axis=1, keepdims=True)\n\n    return dW0, db0, dW1, db1, dW2, db2","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:57:14.096116Z","iopub.execute_input":"2024-05-08T09:57:14.097043Z","iopub.status.idle":"2024-05-08T09:57:14.106126Z","shell.execute_reply.started":"2024-05-08T09:57:14.097010Z","shell.execute_reply":"2024-05-08T09:57:14.105154Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":"**Function to update the parameters**","metadata":{}},{"cell_type":"code","source":"def update_parameters(W0, b0, W1, b1, W2, b2, dW0, db0, dW1, db1, dW2, db2, alpha):\n    # Update the parameters using gradient descent\n    W0 -= alpha * dW0\n    b0 -= alpha * db0\n\n    W1 -= alpha * dW1\n    b1 -= alpha * db1\n\n    W2 -= alpha * dW2\n    b2 -= alpha * db2\n\n    return W0, b0, W1, b1, W2, b2","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:57:41.398516Z","iopub.execute_input":"2024-05-08T09:57:41.399268Z","iopub.status.idle":"2024-05-08T09:57:41.404936Z","shell.execute_reply.started":"2024-05-08T09:57:41.399233Z","shell.execute_reply":"2024-05-08T09:57:41.403986Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"def obtain_prediction(x):\n    if len(x.shape) == 1:                       # If x is a single vector\n        return np.argmax(x)\n    else:                                       # If x is an array of vectors\n        return np.apply_along_axis(np.argmax, axis=0, arr=x)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:57:50.649312Z","iopub.execute_input":"2024-05-08T09:57:50.650091Z","iopub.status.idle":"2024-05-08T09:57:50.655523Z","shell.execute_reply.started":"2024-05-08T09:57:50.650052Z","shell.execute_reply":"2024-05-08T09:57:50.654289Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":"**Obtain the accuracy score**","metadata":{}},{"cell_type":"code","source":"def accuracy_score(predicted, actual):\n    correct = np.sum(predicted == actual)\n    total = predicted.shape\n    return correct / total","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:58:08.300012Z","iopub.execute_input":"2024-05-08T09:58:08.300410Z","iopub.status.idle":"2024-05-08T09:58:08.305904Z","shell.execute_reply.started":"2024-05-08T09:58:08.300380Z","shell.execute_reply":"2024-05-08T09:58:08.304650Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":"**Function to implement gradient descent**","metadata":{}},{"cell_type":"code","source":"def gradient_descent(A0, Y, alpha, epoch, lambd):\n    W0, b0, W1, b1, W2, b2 = initialize_parameters()\n    accuracy_list = []\n\n    for i in range(1, epoch + 1):\n        Z1, A1, Z2, A2, Z3, A3 = forward_propagation(W0, b0, W1, b1, W2, b2, A0)\n        dW0, db0, dW1, db1, dW2, db2 = backward_propagation(Z1, A1, Z2, A2, Z3, A3, W0, W1, W2, A0, Y, lambd)\n        W0, b0, W1, b1, W2, b2 = update_parameters(W0, b0, W1, b1, W2, b2, dW0, db0, dW1, db1, dW2, db2, alpha)\n\n        predicted = obtain_prediction(A3)\n        accuracy = accuracy_score(predicted, Y)\n        accuracy_list.append((i, accuracy))\n\n        if i % 5 == 0:\n            print(f\"Iteration {i}, Accuracy: {accuracy}\")\n\n    return W0, b0, W1, b1, W2, b2, accuracy_list","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:58:31.384611Z","iopub.execute_input":"2024-05-08T09:58:31.385746Z","iopub.status.idle":"2024-05-08T09:58:31.393628Z","shell.execute_reply.started":"2024-05-08T09:58:31.385705Z","shell.execute_reply":"2024-05-08T09:58:31.392706Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"def make_predictions(W0, b0, W1, b1, W2, b2, A0):\n    _, _, _, _, _, A3 = forward_propagation(W0, b0, W1, b1, W2, b2, A0)\n    prediction = obtain_prediction(A3)\n    return prediction","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:58:39.714055Z","iopub.execute_input":"2024-05-08T09:58:39.714786Z","iopub.status.idle":"2024-05-08T09:58:39.719893Z","shell.execute_reply.started":"2024-05-08T09:58:39.714755Z","shell.execute_reply":"2024-05-08T09:58:39.718941Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"def test_prediction(W0, b0, W1, b1, W2, b2, idx):\n    image = test_image[:,idx].reshape(28, 28)\n    actual_label = test_label[idx]\n    prediction = make_predictions(W0, b0, W1, b1, W2, b2, test_image[:,idx].reshape(-1,1))\n\n    plt.figure(figsize=(3,3))\n    plt.imshow(image, cmap='gray')\n    plt.title(f'Predicted: {prediction}, Actual: {actual_label}')\n    plt.axis('off')\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:58:46.528261Z","iopub.execute_input":"2024-05-08T09:58:46.528621Z","iopub.status.idle":"2024-05-08T09:58:46.534898Z","shell.execute_reply.started":"2024-05-08T09:58:46.528591Z","shell.execute_reply":"2024-05-08T09:58:46.533986Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"alpha = 0.1\nepoch = 1500\nlambd = 0.1\nW0, b0, W1, b1, W2, b2, accuracy_list = gradient_descent(train_image, train_label, alpha, epoch, lambd)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T09:58:57.116031Z","iopub.execute_input":"2024-05-08T09:58:57.116956Z","iopub.status.idle":"2024-05-08T10:10:43.239435Z","shell.execute_reply.started":"2024-05-08T09:58:57.116898Z","shell.execute_reply":"2024-05-08T10:10:43.238398Z"},"scrolled":true,"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"Iteration 5, Accuracy: [0.13946341]\nIteration 10, Accuracy: [0.14973171]\nIteration 15, Accuracy: [0.1687561]\nIteration 20, Accuracy: [0.21758537]\nIteration 25, Accuracy: [0.2635122]\nIteration 30, Accuracy: [0.29804878]\nIteration 35, Accuracy: [0.33960976]\nIteration 40, Accuracy: [0.3734878]\nIteration 45, Accuracy: [0.40041463]\nIteration 50, Accuracy: [0.41963415]\nIteration 55, Accuracy: [0.4327561]\nIteration 60, Accuracy: [0.44087805]\nIteration 65, Accuracy: [0.45009756]\nIteration 70, Accuracy: [0.45917073]\nIteration 75, Accuracy: [0.46982927]\nIteration 80, Accuracy: [0.47960976]\nIteration 85, Accuracy: [0.48809756]\nIteration 90, Accuracy: [0.49707317]\nIteration 95, Accuracy: [0.50607317]\nIteration 100, Accuracy: [0.51619512]\nIteration 105, Accuracy: [0.52534146]\nIteration 110, Accuracy: [0.53463415]\nIteration 115, Accuracy: [0.54378049]\nIteration 120, Accuracy: [0.55360976]\nIteration 125, Accuracy: [0.56278049]\nIteration 130, Accuracy: [0.57204878]\nIteration 135, Accuracy: [0.58007317]\nIteration 140, Accuracy: [0.58865854]\nIteration 145, Accuracy: [0.59702439]\nIteration 150, Accuracy: [0.60521951]\nIteration 155, Accuracy: [0.61226829]\nIteration 160, Accuracy: [0.61885366]\nIteration 165, Accuracy: [0.62546341]\nIteration 170, Accuracy: [0.63190244]\nIteration 175, Accuracy: [0.63741463]\nIteration 180, Accuracy: [0.64307317]\nIteration 185, Accuracy: [0.648]\nIteration 190, Accuracy: [0.653]\nIteration 195, Accuracy: [0.657]\nIteration 200, Accuracy: [0.66131707]\nIteration 205, Accuracy: [0.66526829]\nIteration 210, Accuracy: [0.66965854]\nIteration 215, Accuracy: [0.67368293]\nIteration 220, Accuracy: [0.67741463]\nIteration 225, Accuracy: [0.68058537]\nIteration 230, Accuracy: [0.68358537]\nIteration 235, Accuracy: [0.6864878]\nIteration 240, Accuracy: [0.68914634]\nIteration 245, Accuracy: [0.69146341]\nIteration 250, Accuracy: [0.69390244]\nIteration 255, Accuracy: [0.69634146]\nIteration 260, Accuracy: [0.69814634]\nIteration 265, Accuracy: [0.69934146]\nIteration 270, Accuracy: [0.70119512]\nIteration 275, Accuracy: [0.70292683]\nIteration 280, Accuracy: [0.70478049]\nIteration 285, Accuracy: [0.70585366]\nIteration 290, Accuracy: [0.70741463]\nIteration 295, Accuracy: [0.70895122]\nIteration 300, Accuracy: [0.71021951]\nIteration 305, Accuracy: [0.71126829]\nIteration 310, Accuracy: [0.71234146]\nIteration 315, Accuracy: [0.71365854]\nIteration 320, Accuracy: [0.71480488]\nIteration 325, Accuracy: [0.71595122]\nIteration 330, Accuracy: [0.71709756]\nIteration 335, Accuracy: [0.71826829]\nIteration 340, Accuracy: [0.71897561]\nIteration 345, Accuracy: [0.72012195]\nIteration 350, Accuracy: [0.72143902]\nIteration 355, Accuracy: [0.72253659]\nIteration 360, Accuracy: [0.7235122]\nIteration 365, Accuracy: [0.72460976]\nIteration 370, Accuracy: [0.726]\nIteration 375, Accuracy: [0.72692683]\nIteration 380, Accuracy: [0.72792683]\nIteration 385, Accuracy: [0.72895122]\nIteration 390, Accuracy: [0.72980488]\nIteration 395, Accuracy: [0.73129268]\nIteration 400, Accuracy: [0.73260976]\nIteration 405, Accuracy: [0.73356098]\nIteration 410, Accuracy: [0.73485366]\nIteration 415, Accuracy: [0.73590244]\nIteration 420, Accuracy: [0.73736585]\nIteration 425, Accuracy: [0.73839024]\nIteration 430, Accuracy: [0.73931707]\nIteration 435, Accuracy: [0.74041463]\nIteration 440, Accuracy: [0.74182927]\nIteration 445, Accuracy: [0.74297561]\nIteration 450, Accuracy: [0.7442439]\nIteration 455, Accuracy: [0.74585366]\nIteration 460, Accuracy: [0.74673171]\nIteration 465, Accuracy: [0.74829268]\nIteration 470, Accuracy: [0.7492439]\nIteration 475, Accuracy: [0.7507561]\nIteration 480, Accuracy: [0.75219512]\nIteration 485, Accuracy: [0.75368293]\nIteration 490, Accuracy: [0.75560976]\nIteration 495, Accuracy: [0.7577561]\nIteration 500, Accuracy: [0.75929268]\nIteration 505, Accuracy: [0.76112195]\nIteration 510, Accuracy: [0.76290244]\nIteration 515, Accuracy: [0.76468293]\nIteration 520, Accuracy: [0.76678049]\nIteration 525, Accuracy: [0.7687561]\nIteration 530, Accuracy: [0.77060976]\nIteration 535, Accuracy: [0.77273171]\nIteration 540, Accuracy: [0.77502439]\nIteration 545, Accuracy: [0.7775122]\nIteration 550, Accuracy: [0.77973171]\nIteration 555, Accuracy: [0.78202439]\nIteration 560, Accuracy: [0.78458537]\nIteration 565, Accuracy: [0.78678049]\nIteration 570, Accuracy: [0.78963415]\nIteration 575, Accuracy: [0.79221951]\nIteration 580, Accuracy: [0.79456098]\nIteration 585, Accuracy: [0.79673171]\nIteration 590, Accuracy: [0.79904878]\nIteration 595, Accuracy: [0.80160976]\nIteration 600, Accuracy: [0.80387805]\nIteration 605, Accuracy: [0.80590244]\nIteration 610, Accuracy: [0.80843902]\nIteration 615, Accuracy: [0.81039024]\nIteration 620, Accuracy: [0.81217073]\nIteration 625, Accuracy: [0.81443902]\nIteration 630, Accuracy: [0.81663415]\nIteration 635, Accuracy: [0.81826829]\nIteration 640, Accuracy: [0.8205122]\nIteration 645, Accuracy: [0.8224878]\nIteration 650, Accuracy: [0.8242439]\nIteration 655, Accuracy: [0.82587805]\nIteration 660, Accuracy: [0.82731707]\nIteration 665, Accuracy: [0.82890244]\nIteration 670, Accuracy: [0.83039024]\nIteration 675, Accuracy: [0.83165854]\nIteration 680, Accuracy: [0.83285366]\nIteration 685, Accuracy: [0.83417073]\nIteration 690, Accuracy: [0.83556098]\nIteration 695, Accuracy: [0.83673171]\nIteration 700, Accuracy: [0.83804878]\nIteration 705, Accuracy: [0.83909756]\nIteration 710, Accuracy: [0.83992683]\nIteration 715, Accuracy: [0.84112195]\nIteration 720, Accuracy: [0.84236585]\nIteration 725, Accuracy: [0.843]\nIteration 730, Accuracy: [0.84382927]\nIteration 735, Accuracy: [0.84463415]\nIteration 740, Accuracy: [0.8457561]\nIteration 745, Accuracy: [0.8465122]\nIteration 750, Accuracy: [0.84739024]\nIteration 755, Accuracy: [0.8484878]\nIteration 760, Accuracy: [0.84909756]\nIteration 765, Accuracy: [0.85012195]\nIteration 770, Accuracy: [0.85097561]\nIteration 775, Accuracy: [0.85170732]\nIteration 780, Accuracy: [0.85243902]\nIteration 785, Accuracy: [0.85287805]\nIteration 790, Accuracy: [0.8534878]\nIteration 795, Accuracy: [0.85463415]\nIteration 800, Accuracy: [0.85517073]\nIteration 805, Accuracy: [0.85570732]\nIteration 810, Accuracy: [0.8565122]\nIteration 815, Accuracy: [0.85704878]\nIteration 820, Accuracy: [0.8575122]\nIteration 825, Accuracy: [0.85826829]\nIteration 830, Accuracy: [0.859]\nIteration 835, Accuracy: [0.85939024]\nIteration 840, Accuracy: [0.86]\nIteration 845, Accuracy: [0.86021951]\nIteration 850, Accuracy: [0.86070732]\nIteration 855, Accuracy: [0.86131707]\nIteration 860, Accuracy: [0.86170732]\nIteration 865, Accuracy: [0.86207317]\nIteration 870, Accuracy: [0.86253659]\nIteration 875, Accuracy: [0.86321951]\nIteration 880, Accuracy: [0.86356098]\nIteration 885, Accuracy: [0.86421951]\nIteration 890, Accuracy: [0.86465854]\nIteration 895, Accuracy: [0.86514634]\nIteration 900, Accuracy: [0.86556098]\nIteration 905, Accuracy: [0.86582927]\nIteration 910, Accuracy: [0.86634146]\nIteration 915, Accuracy: [0.86687805]\nIteration 920, Accuracy: [0.86739024]\nIteration 925, Accuracy: [0.86795122]\nIteration 930, Accuracy: [0.86856098]\nIteration 935, Accuracy: [0.86907317]\nIteration 940, Accuracy: [0.8694878]\nIteration 945, Accuracy: [0.87014634]\nIteration 950, Accuracy: [0.87060976]\nIteration 955, Accuracy: [0.87117073]\nIteration 960, Accuracy: [0.87165854]\nIteration 965, Accuracy: [0.87190244]\nIteration 970, Accuracy: [0.8722439]\nIteration 975, Accuracy: [0.87263415]\nIteration 980, Accuracy: [0.87295122]\nIteration 985, Accuracy: [0.87341463]\nIteration 990, Accuracy: [0.87363415]\nIteration 995, Accuracy: [0.87395122]\nIteration 1000, Accuracy: [0.8745122]\nIteration 1005, Accuracy: [0.87482927]\nIteration 1010, Accuracy: [0.87517073]\nIteration 1015, Accuracy: [0.87556098]\nIteration 1020, Accuracy: [0.87609756]\nIteration 1025, Accuracy: [0.87641463]\nIteration 1030, Accuracy: [0.87680488]\nIteration 1035, Accuracy: [0.877]\nIteration 1040, Accuracy: [0.87736585]\nIteration 1045, Accuracy: [0.87768293]\nIteration 1050, Accuracy: [0.87792683]\nIteration 1055, Accuracy: [0.87817073]\nIteration 1060, Accuracy: [0.87843902]\nIteration 1065, Accuracy: [0.87890244]\nIteration 1070, Accuracy: [0.87929268]\nIteration 1075, Accuracy: [0.8794878]\nIteration 1080, Accuracy: [0.87990244]\nIteration 1085, Accuracy: [0.8802439]\nIteration 1090, Accuracy: [0.88046341]\nIteration 1095, Accuracy: [0.8807561]\nIteration 1100, Accuracy: [0.88104878]\nIteration 1105, Accuracy: [0.88121951]\nIteration 1110, Accuracy: [0.8814878]\nIteration 1115, Accuracy: [0.88163415]\nIteration 1120, Accuracy: [0.88178049]\nIteration 1125, Accuracy: [0.88195122]\nIteration 1130, Accuracy: [0.88204878]\nIteration 1135, Accuracy: [0.88239024]\nIteration 1140, Accuracy: [0.88256098]\nIteration 1145, Accuracy: [0.883]\nIteration 1150, Accuracy: [0.88307317]\nIteration 1155, Accuracy: [0.88343902]\nIteration 1160, Accuracy: [0.88360976]\nIteration 1165, Accuracy: [0.88395122]\nIteration 1170, Accuracy: [0.88414634]\nIteration 1175, Accuracy: [0.88441463]\nIteration 1180, Accuracy: [0.88470732]\nIteration 1185, Accuracy: [0.88507317]\nIteration 1190, Accuracy: [0.8852439]\nIteration 1195, Accuracy: [0.88553659]\nIteration 1200, Accuracy: [0.88587805]\nIteration 1205, Accuracy: [0.88629268]\nIteration 1210, Accuracy: [0.88663415]\nIteration 1215, Accuracy: [0.88695122]\nIteration 1220, Accuracy: [0.8872439]\nIteration 1225, Accuracy: [0.88746341]\nIteration 1230, Accuracy: [0.88765854]\nIteration 1235, Accuracy: [0.88814634]\nIteration 1240, Accuracy: [0.88829268]\nIteration 1245, Accuracy: [0.8884878]\nIteration 1250, Accuracy: [0.88868293]\nIteration 1255, Accuracy: [0.88885366]\nIteration 1260, Accuracy: [0.88895122]\nIteration 1265, Accuracy: [0.88904878]\nIteration 1270, Accuracy: [0.88931707]\nIteration 1275, Accuracy: [0.88978049]\nIteration 1280, Accuracy: [0.88995122]\nIteration 1285, Accuracy: [0.89017073]\nIteration 1290, Accuracy: [0.89041463]\nIteration 1295, Accuracy: [0.89073171]\nIteration 1300, Accuracy: [0.89090244]\nIteration 1305, Accuracy: [0.89095122]\nIteration 1310, Accuracy: [0.89126829]\nIteration 1315, Accuracy: [0.8914878]\nIteration 1320, Accuracy: [0.89185366]\nIteration 1325, Accuracy: [0.89209756]\nIteration 1330, Accuracy: [0.89229268]\nIteration 1335, Accuracy: [0.89258537]\nIteration 1340, Accuracy: [0.89278049]\nIteration 1345, Accuracy: [0.89287805]\nIteration 1350, Accuracy: [0.89312195]\nIteration 1355, Accuracy: [0.89331707]\nIteration 1360, Accuracy: [0.89334146]\nIteration 1365, Accuracy: [0.8934878]\nIteration 1370, Accuracy: [0.89360976]\nIteration 1375, Accuracy: [0.894]\nIteration 1380, Accuracy: [0.89409756]\nIteration 1385, Accuracy: [0.8942439]\nIteration 1390, Accuracy: [0.89439024]\nIteration 1395, Accuracy: [0.8944878]\nIteration 1400, Accuracy: [0.89463415]\nIteration 1405, Accuracy: [0.89473171]\nIteration 1410, Accuracy: [0.89507317]\nIteration 1415, Accuracy: [0.89517073]\nIteration 1420, Accuracy: [0.89541463]\nIteration 1425, Accuracy: [0.89563415]\nIteration 1430, Accuracy: [0.89573171]\nIteration 1435, Accuracy: [0.896]\nIteration 1440, Accuracy: [0.89614634]\nIteration 1445, Accuracy: [0.89621951]\nIteration 1450, Accuracy: [0.89641463]\nIteration 1455, Accuracy: [0.89660976]\nIteration 1460, Accuracy: [0.89687805]\nIteration 1465, Accuracy: [0.897]\nIteration 1470, Accuracy: [0.89709756]\nIteration 1475, Accuracy: [0.89729268]\nIteration 1480, Accuracy: [0.89746341]\nIteration 1485, Accuracy: [0.89770732]\nIteration 1490, Accuracy: [0.89778049]\nIteration 1495, Accuracy: [0.89787805]\nIteration 1500, Accuracy: [0.89804878]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Extract epoch numbers and accuracy values**","metadata":{}},{"cell_type":"code","source":"epochs = [entry[0] for entry in accuracy_list]\naccuracy_values = [entry[1][0] for entry in accuracy_list]","metadata":{"execution":{"iopub.status.busy":"2024-05-08T10:11:58.293810Z","iopub.execute_input":"2024-05-08T10:11:58.294772Z","iopub.status.idle":"2024-05-08T10:11:58.300135Z","shell.execute_reply.started":"2024-05-08T10:11:58.294723Z","shell.execute_reply":"2024-05-08T10:11:58.299190Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":"**Print the maximum accuracy and its epoch**","metadata":{}},{"cell_type":"code","source":"max_accuracy = max(accuracy_values)\nmax_accuracy_epoch = epochs[accuracy_values.index(max_accuracy)]","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Plot the epoch versus accuracy curve**","metadata":{}},{"cell_type":"code","source":"plt.plot(epochs, accuracy_values)\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Epoch vs Accuracy')\nplt.grid()\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_prediction(W0, b0, W1, b1, W2, b2, np.random.randint(0, 1000))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Accuracy score on the test set**","metadata":{}},{"cell_type":"code","source":"_, _, _, _, _, A3 = forward_propagation(W0, b0, W1, b1, W2, b2, test_image)\nprediction = obtain_prediction(A3)\naccuracy = accuracy_score(prediction, test_label)\nprint(f'Accuracy Score from test set: {\"{:.2%}\".format(float(accuracy))}', )","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"conf_matrix = confusion_matrix(test_label, prediction)\nprint(conf_matrix)\nplt.figure()\nsns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Greys\", xticklabels=np.arange(10), yticklabels=np.arange(10))\nplt.xlabel(\"Predicted Labels\")\nplt.ylabel(\"Actual Labels\")\nplt.title(\"Confusion Matrix\")\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"report = classification_report(test_label, prediction)\nreport","metadata":{},"execution_count":null,"outputs":[]}]}